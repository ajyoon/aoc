Introduction

Half of the poems in this book were written in the year before I gave birth to my child. The other half were written in the year after. I am interested in the arrangement of these poems. Although the temporal order of the poems' creation has meaning, so do their prosodic relation to each other. When I repeat a turn of phrase six months later, I engage, however serendipidously, in a kind of looping, tying together time in a new way.

I also suspected that, as time progressed and my experience of conception, pregnancy, childbirth, and postpartum became distorted in my memory, that the whole two year period would become knotty as I incorporated the events into a different kind of story: one that reached further into the past and further into the future, and was less concerned with their original temporal order.

Finally, I wanted the reader of this book to contribute to this integration of time and memory and experience. As readers come to the book, they bring their own interpretation, distorting my experience anew through the lens of their own. Thus, each printing of the book represents a step towards a new order, one influenced by all the readers that came before.

But how to arrange these poems? I created a simple algorithm to "score" how well two poems would sit next to each other, mostly depending on the repetition of words or phrases. Then, I was delighted to see the connection between the ordering of the poems and a classic problem in computer science: the traveling salesman problem. In this problem, there are a set of cities with known distances between them. The problem is to determine an optimal route for the traveling salesman, such that he (of course it is a he) visits each city once, but travels the minimum distance necessary. 

What is striking about this problem is that it has an attribute called "NP-complete" which stands for "nondeterministic polynomial-time complete." This means that we currently have no algorithm to find the optimal solution quickly. This just means that as the number of cities increases, the difficulty of finding the optimal solution increases very, very quickly (greater than polynomially, though not greater than exponentially). So to optimally solve the traveling salesman problem, or, in this case, the optimal arrangement of the poems give a score of how well each poem would fit next to another, it would take an unreasonably long time. For my 200 short prose poems, if we wanted to check on each possible ordering, there are about 10^374 possible ways to order them. This is far, far, far more than the number of observable stars in the universe, currently estimated to be about 10^24. To find the optimal ordering is, effectively, unsolved in computer science.

Part of what delighted me was simply that the traveling salesman problem is such a classic problem, one I learned about in my first algorithms class as a graduate student in computer science. But also, the traveling salesman problem sits distinctly outside the realm of the current interest in computation and writing in 2023 and 2024, namely large language models that can generate fluent-sounding text. The idea that I had accidentally concocted for myself a computational problem that harkened back to a more theoretically sound and mathematically complicated algorithmic arena than the free-wheeling and often corporatized text generators felt beautiful; it seems that there was still a place for computation in my work without disrupting my writing process or engaging in ethically dubious models.

Plus, the traveling salesman problem was technically a very fun problem to work on.

*

So how was I to arrange these poems? Despite this problem being computationally unsolved, one needn't look for the perfect, optimal solution. Instead, one can (and in fact does) look for approximately optimal solutions. To select an arrangement of poems, I use a technique called Markov Chain Monte Carlo. It is a bit easier, I think, to talk about the ordering in terms of cities and distances. So for a moment let's imagine each poem is a city, with known distances between the poems, where the distance represents how well two poems sit together. (Actually, because going from poem A to poem B is different than poem B to poem A, they have asymmetric distances. This doesn't dramatically change the approach.) 

The main idea is that first I pick a random order in which to visit the cities (poems)--let's call this our "tour"--and calculate the total distance of the tour, i.e. the sum of all the distances between the cities in the order I visit them. Then I randomly swap two of the cities (poems), changing the order we visit the cities (poems). If the overall distance of this tour is lower, then we say "yay" and keep this new tour. If it's not lower, we don't do anything. Then we do another random swap, check if the tour is better, keep the new tour if better, etc. We do these random swaps many, many times (about fifty thousand times in this particular case) and eventually the tours are getting better and better, even though the swaps are always random.

This isn't guaranteed to get us the best tour, but it does tend to get us a pretty good one. There are a few more details--I implemented something called simulated annealing, which helps find good tours by sometimes allowing slightly worse ones--but generally this is how it goes. What's neat about this method is, because it is not finding the best tour but simply a pretty good one, you can do it many times and produce many good tours that are distinct.

However, there is one extra, important detail. Remember that originally I split the poems in half, the poems before birth and the poems after. For the first ten printings of the book, these poems are separated as originally written, and each set are ordered using the method above. For the second ten printings, a single poem from each set can be swapped, not always the same one, though one selected by the algorithmic optimization. For the third printings, two poems are swapped, and so on. For details about how the swapped poems are selected, I refer you to the code, which includes detailed descriptions of the algorithm in addition to its actual implementation.

*

You, dear reader, are reading a particular iteration of this book. This iteration represents a specific amount of mixing between the two sets of poems, and a specific almost-but-not-quite-optimal ordering of those poems. If you are an early reader, the amount of mixing of my memories is low. If you are a later reader, they get progressively more and more mixed up, and finally shuffle around randomly with the distortion of time.

This book, therefore, represents a distinct tour of the poems, influenced by how many readers came before you and the random sweepings of time. The connections made are distinctly yours, because you are bringing your own experience, and you are being coupled to a unique printing of the book. We have, in a way, merged, reader and author and words all, into a special creature that none of us could have quite imagined on our own.

Katy Ilonka Gero
Cambridge, Massachusetts
August 2024